---
parent: 'common/test_cases/minimal.yml'
extensions:
  actions:
    - type: "host_script"
      title: "Upload the default AWS credentiasl"
      script: |-
         ssh -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "mkdir -p ~/.aws"
         scp -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config ~/.aws/credentials openshiftdevel:~/.aws
         ssh -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "mkdir -p ~/.ssh"
         scp -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.ssh/openshift-dev.pem openshiftdevel:~/.ssh/openshift-dev.pem
    - type: "script"
      title: "Install minikube"
      script: |-
        # Install minikube
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.30.0/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/bin/
        # Install kubectl
        curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl
        chmod +x kubectl
        sudo mv kubectl /usr/bin/
        # Install crictl
        curl -Lo crictl-v1.12.0-linux-amd64.tar.gz https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.12.0/crictl-v1.12.0-linux-amd64.tar.gz
        tar -xvf crictl-v1.12.0-linux-amd64.tar.gz
        sudo mv crictl /usr/bin/
    - type: "script"
      title: "Deploy kubernetes"
      script: |-
        sudo setenforce 0
        # https://github.com/kubernetes/minikube/blob/master/docs/configuring_kubernetes.md
        sudo minikube start --vm-driver=none --extra-config=kubelet.cgroup-driver=systemd --kubernetes-version v1.12.0 --v 5
    - type: "script"
      title: "Build the machine controller"
      script: |-
        export GOPATH=/data
        cd $GOPATH/src/github.com/openshift/cluster-api-provider-aws
        go get -u github.com/openshift/imagebuilder/cmd/imagebuilder
        sudo mv /data/bin/imagebuilder /usr/bin
        sed -i "s/FROM registry\.svc\.ci\.openshift\.org\/openshift\/origin-v4\.0:base/FROM docker\.io\/gofed\/base:baseci/" Dockerfile
        sudo make images NO_DOCKER=1
    - type: "script"
      title: "Create cluster resources"
      script: |-
        export GOPATH=/data
        cd $GOPATH/src/github.com/openshift/cluster-api-provider-aws/
        sudo pip install awscli
        curl https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip -o terraform_0.11.8_linux_amd64.zip
        unzip terraform_0.11.8_linux_amd64.zip
        sudo cp ./terraform /usr/bin/.

        export CLUSTER_ID="pr-${BUILD_NUMBER}-${PULL_NUMBER}"

        # Create all the aws resources
        pushd hack
        set +x
        echo "export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)" >> envs
        echo "export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)" >> envs
        source envs
        set -x
        AWS_DEFAULT_REGION="us-east-1" ENVIRONMENT_ID=${CLUSTER_ID} ./aws-provision.sh install
        popd

        sudo cp /etc/ssl/certs/ca-bundle.crt /etc/ssl/certs/ca-certificates.crt
    - type: "script"
      title: "Install go 1.10.1"
      script: |-
        mkdir -p ~/bin
        curl -sL -o ~/bin/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
        chmod +x ~/bin/gimme
        gimme 1.10.1
    - type: "script"
      title: "Run e2e tests"
      script: |-
        set +x
        export GOPATH=/data
        mkdir -p /data/src/sigs.k8s.io
        ln -s $GOPATH/src/github.com/openshift/cluster-api-provider-aws $GOPATH/src/sigs.k8s.io/cluster-api-provider-aws
        cd $GOPATH/src/sigs.k8s.io/cluster-api-provider-aws

        set +x
        source hack/envs
        set -x

        chmod 0600 ~/.ssh/openshift-dev.pem

        export CLUSTER_ID="pr-${BUILD_NUMBER}-${PULL_NUMBER}"
        export ENVIRONMENT_ID="${CLUSTER_ID}"
        export SSH_PK="/home/origin/.ssh/openshift-dev.pem"

        export CLUSTER_IP="$(sudo kubectl get service kubernetes -o json | jq '.spec.clusterIP' --raw-output)"
        export KUBECONFIG=/etc/kubernetes/admin.conf
        sudo -E kubectl config set-cluster kubernetes --server=https://${CLUSTER_IP}:443

        source ~/.gimme/envs/go1.11.1.env
        sudo -E make k8s-e2e ACTUATOR_IMAGE=origin-aws-machine-controllers:$(git describe --always --abbrev=7)

        echo "The aws instance was running and terminated"
  system_journals:
    - systemd-journald.service
overrides:
  post_actions:
    - type: "script"
      title: "Deprovision resources"
      script: |-
        cd $GOPATH/src/github.com/openshift/cluster-api-provider-aws/hack
        if [[ -e envs ]]; then
          set +x
          source envs
          set -x
          AWS_DEFAULT_REGION="us-east-1" ./aws-provision.sh destroy || true
        fi
    - type: "host_script"
      title: "assemble GCS output"
      timeout: 300
      script: |-
        trap 'exit 0' EXIT
        mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/gathered
        result=$( python -c "import json; import urllib; print json.load(urllib.urlopen('${BUILD_URL}api/json'))['result']" )
        cat <<FINISHED >gcs/finished.json
        {
          "timestamp": $( date +%s ),
          "result": "${result}"
        }
        FINISHED
        cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
        cp artifacts/generated/* gcs/artifacts/generated/
        cp artifacts/journals/* gcs/artifacts/journals/

        scp -F ./.config/origin-ci-tool/inventory/.ssh_config -r "$( pwd )/gcs" openshiftdevel:/data
        scp -F ./.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.config/gcloud/gcs-publisher-credentials.json openshiftdevel:/data/credentials.json
    - type: "script"
      title: "push the artifacts and metadata"
      timeout: 300
      script: |-
        trap 'exit 0' EXIT
        if [[ -n "${JOB_SPEC:-}" ]]; then
          JOB_SPEC="$( jq --compact-output ".buildid |= \"${BUILD_NUMBER}\"" <<<"${JOB_SPEC}" )"
          sudo docker run -e JOB_SPEC="${JOB_SPEC}" -v "/data:/data:z" registry.svc.ci.openshift.org/ci/gcsupload:latest --dry-run=false --gcs-path=gs://origin-ci-test --gcs-credentials-file=/data/credentials.json /data/gcs/*
        fi
